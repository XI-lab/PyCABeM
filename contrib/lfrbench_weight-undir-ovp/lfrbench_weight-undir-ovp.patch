Only in weighted_networks/: 2K5.cnl
Only in weighted_networks/: 2K5.gpn
Only in weighted_networks/: 2K5.nsa
Only in weighted_networks/: 2K5.nst
Only in weighted_networks/: 50K5.cnl
Only in weighted_networks/: 50K5.gpn
Only in weighted_networks/: 50K5.nsa
Only in weighted_networks/: 50K5.nst
Only in weighted_networks/: benchmark
Only in weighted_networks/: benchmark.orig
Only in weighted_networks/: _community.dat
Only in weighted_networks/: community.dat
Only in weighted_networks/: .DS_Store
diff -ru orig/flags.dat weighted_networks/flags.dat
--- orig/flags.dat	2010-11-26 11:11:55.000000000 +0100
+++ weighted_networks/flags.dat	2015-05-01 17:39:04.517724134 +0200
@@ -1,12 +1,12 @@
 -N 1000
--k 15
--maxk 50
+-k 6
+-maxk 80
 -mut 0.3
--muw 0.2
--beta 1.5
--t1 2
--t2 1
+-muw 0.25
+-beta 1.3
+-t1 1.8
+-t2 1.3
 -minc 20
 -maxc 50
--on 0
--om 0
\ No newline at end of file
+-on 90
+-om 3
Only in weighted_networks/: flags.dat.orig
Only in weighted_networks/: flags_my.dat
Only in weighted_networks/: gennet.cnl
Only in weighted_networks/: gennet.nmc
Only in weighted_networks/: gennet.nsa
Only in weighted_networks/: gennet.nst
Only in weighted_networks/: lfrbench_uwovp
Only in weighted_networks/: lfrbench_uwovp_v1
Only in weighted_networks/: lfrbench_uwovp_v2
Only in weighted_networks/: network.dat
diff -ru orig/Sources/benchm.cpp weighted_networks/Sources/benchm.cpp
--- orig/Sources/benchm.cpp	2014-01-03 14:03:47.000000000 +0100
+++ weighted_networks/Sources/benchm.cpp	2015-05-04 18:41:15.027031791 +0200
@@ -28,6 +28,14 @@
  *	Project: Benchmarking community detection programs                           *
  *                                                                               *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
+ *  Parameters extended by Artem Lutov on 04.05.15 (email: luart@ya.ru)          
+ *  Location: eXascale Infolab, University of Fribourg, Switzerland              
+ *
+ *  Changelog:
+ *  - Parameter "-cnl" (ommunity nodes list) added to output communities as line of
+ *  nodes to be compatible with NMI evaluation input format
+ *  - Parameters "-name" added to give custom name for the output files
+ * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  */
 
 
@@ -35,7 +43,8 @@
 
 
 int print_network(deque<set<int> > & E, const deque<deque<int> > & member_list, const deque<deque<int> > & member_matrix, 
-	deque<int> & num_seq, deque<map <int, double > > & neigh_weigh, double beta, double mu, double mu0) {
+	deque<int> & num_seq, deque<map <int, double > > & neigh_weigh, double beta, double mu, double mu0, bool cnodes,
+	const string& fnameNetwork, const string& fnameCommunity, const string& fnameStatistics) {
 
 	
 	int edges=0;
@@ -95,7 +104,7 @@
 	
 
 
-	ofstream out1("network.dat");
+	ofstream out1(fnameNetwork.c_str());
 	for (int u=0; u<E.size(); u++) {
 
 		set<int>::iterator itb=E[u].begin();
@@ -109,15 +118,30 @@
 		
 
 	
-	ofstream out2("community.dat");
-
-	for (int i=0; i<member_list.size(); i++) {
+	ofstream out2(fnameCommunity.c_str());
+	if(!cnodes) {
+		for (int i=0; i<member_list.size(); i++) {
+			
+			out2<<i+1<<"\t";
+			for (int j=0; j<member_list[i].size(); j++)
+				out2<<member_list[i][j]+1<<" ";
+			out2<<endl;
 		
-		out2<<i+1<<"\t";
-		for (int j=0; j<member_list[i].size(); j++)
-			out2<<member_list[i][j]+1<<" ";
-		out2<<endl;
-	
+		}
+	} else {
+		vector<vector<int> >  communs(member_matrix.size());
+
+		for (int i=0; i<member_list.size(); i++)
+			for (int j=0; j<member_list[i].size(); j++)
+				communs[member_list[i][j]].push_back(i);
+		
+		for(int i = 0; i < communs.size(); ++i) {
+			if(communs[i].empty())
+				continue;
+			for(int j = 0; j < communs[i].size(); ++j)
+				out2 << communs[i][j] + 1 << ' ';
+			out2<<endl;
+		}
 	}
 
 	cout<<"\n\n---------------------------------------------------------------------------"<<endl;
@@ -129,7 +153,7 @@
 
 	
 	
-	ofstream statout("statistics.dat");
+	ofstream statout(fnameStatistics.c_str());
 	
 	deque<int> degree_seq;
 	for (int i=0; i<E.size(); i++)
@@ -684,7 +708,9 @@
 
 
 int benchmark(bool excess, bool defect, int num_nodes, double  average_k, int  max_degree, double  tau, double  tau2, 
-	double  mixing_parameter, double  mixing_parameter2, double  beta, int  overlapping_nodes, int  overlap_membership, int  nmin, int  nmax, bool  fixed_range, double ca) {	
+	double  mixing_parameter, double  mixing_parameter2, double  beta, int  overlapping_nodes, int  overlap_membership,
+	int  nmin, int  nmax, bool  fixed_range, double ca, bool cnodes, const string& fnameNetwork, const string& fnameCommunity,
+	const string& fnameStatistics) {
 
 	
 	
@@ -801,7 +827,8 @@
 	
 
 	cout<<"recording network..."<<endl;	
-	print_network(E, member_list, member_matrix, num_seq, neigh_weigh, beta, mixing_parameter2, mixing_parameter);
+	print_network(E, member_list, member_matrix, num_seq, neigh_weigh, beta,
+		mixing_parameter2, mixing_parameter, cnodes, fnameNetwork, fnameCommunity, fnameStatistics);
 
 	
 	
@@ -851,12 +878,15 @@
 	}
 	
 	
-	erase_file_if_exists("network.dat");
-	erase_file_if_exists("community.dat");
-	erase_file_if_exists("statistics.dat");
+	erase_file_if_exists(p.fnameNetwork);
+	erase_file_if_exists(p.fnameCommunity);
+	erase_file_if_exists(p.fnameStatistics);
 
 	
-	benchmark(p.excess, p.defect, p.num_nodes, p.average_k, p.max_degree, p.tau, p.tau2, p.mixing_parameter,  p.mixing_parameter2,  p.beta, p.overlapping_nodes, p.overlap_membership, p.nmin, p.nmax, p.fixed_range, p.clustering_coeff);	
+	benchmark(p.excess, p.defect, p.num_nodes, p.average_k, p.max_degree,
+		p.tau, p.tau2, p.mixing_parameter,  p.mixing_parameter2,  p.beta,
+		p.overlapping_nodes, p.overlap_membership, p.nmin, p.nmax, p.fixed_range,
+		p.clustering_coeff, p.cnodes, p.fnameNetwork, p.fnameCommunity, p.fnameStatistics);
 		
 	return 0;
 	
diff -ru orig/Sources/binary_benchm.cpp weighted_networks/Sources/binary_benchm.cpp
--- orig/Sources/binary_benchm.cpp	2014-01-03 14:05:31.000000000 +0100
+++ weighted_networks/Sources/binary_benchm.cpp	2015-05-05 22:31:22.648904712 +0200
@@ -62,12 +62,30 @@
 
 
 //bisection method to find the inferior limit, in order to have the expected average degree
-double solve_dmin(const double& dmax, const double &dmed, const double &gamma) {
+double solve_dmin(int& dmax, const double &dmed, const double &gamma) {
 	
 	double dmin_l=1;
 	double dmin_r=dmax;
 	double average_k1=average_degree(dmin_r, dmin_l, gamma);
 	double average_k2=dmin_r;
+
+	if (average_k1-dmed>0) {
+		// Try to automatically reduce dmax
+		cout << "k1: " << average_k1 << ", dmed: " << dmed << ", k2: " << average_k2 << endl;
+		double tdmax = int(pow(dmed, log(dmax) / log(average_k1)) * (1 - log(1 + average_k1-dmed)/10));
+		double taverage_k1=average_degree(tdmax, dmin_l, gamma);
+		double taverage_k2=tdmax;
+		cout << "WARNING: trying to decrease the maximum degree from "
+			 << dmax << " to " << tdmax << " to converge\n";
+		cout << "k1: " << taverage_k1 << ", dmed: " << dmed << ", k2: " << taverage_k2 << endl;
+		if (!(taverage_k1-dmed>0 || taverage_k2-dmed<0)) {
+			dmax = dmin_r = tdmax;
+			average_k1 = taverage_k1;
+			average_k2 = taverage_k2;
+			cout << "\nWARNING: maximum degree is automatically decreased to "
+				 << dmax << " to converge\n" << endl;
+		}
+	}
 	
 	
 	if ((average_k1-dmed>0) || (average_k2-dmed<0)) {
diff -ru orig/Sources/set_parameters.cpp weighted_networks/Sources/set_parameters.cpp
--- orig/Sources/set_parameters.cpp	2009-10-30 10:43:20.000000000 +0100
+++ weighted_networks/Sources/set_parameters.cpp	2015-05-04 18:46:46.015026054 +0200
@@ -30,6 +30,12 @@
 		bool defect;
 		bool randomf;
 		double clustering_coeff;
+
+		bool cnodes;  // List communities as string of nodes per each community (such format is used in NMI evaluation)
+		// Output data filenames
+		string fnameNetwork;
+		string fnameCommunity;
+		string fnameStatistics;
 		
 		
 		bool set(string &, string &);
@@ -71,6 +77,13 @@
 
 		clustering_coeff=unlikely;
 		
+		cnodes = false;
+		
+		fnameNetwork = "network.dat";
+		fnameCommunity = "community.dat";
+		fnameStatistics = "statistics.dat";
+
+
 		command_flags.push_back("-N");			//0
 		command_flags.push_back("-k");			//1
 		command_flags.push_back("-maxk");		//2
@@ -84,6 +97,8 @@
 		command_flags.push_back("-beta");		//10
 		command_flags.push_back("-muw");		//11
 		command_flags.push_back("-C");			//12
+		command_flags.push_back("-cnl");		//13
+		command_flags.push_back("-name");		//14
 			
 		
 };
@@ -205,6 +220,7 @@
 	cout<<"beta exponent:\t"<<beta<<endl;
 	cout<<"number of overlapping nodes:\t"<<overlapping_nodes<<endl;
 	cout<<"number of memberships of the overlapping nodes:\t"<<overlap_membership<<endl;
+	cout<<"compact communities output format (NMI eval compatible):\t"<<cnodes<<endl;
 	if(clustering_coeff!=unlikely)
 		cout<<"Average clustering coefficient: "<<clustering_coeff<<endl;
 	
@@ -248,7 +264,7 @@
 	
 	cout<<"setting... "<<flag<<" "<<num<<endl;
 	double err;
-	if(!cast_string_to_double(num, err)) {
+	if(flag != command_flags[14] && !cast_string_to_double(num, err)) {
 				
 		cerr<<"\n***********************\nERROR while reading parameters"<<endl;
 		return false;
@@ -358,6 +374,19 @@
 		clustering_coeff=err;		
 
 	}
+	else if(flag==command_flags[13]) {
+		cnodes=cast_int(err);
+		if(cnodes && fnameCommunity.find(".nmc", fnameCommunity.size() - 4) != string::npos)
+			fnameCommunity.replace(fnameCommunity.size() - 4, 4, ".cnl");
+	}
+	else if(flag==command_flags[14]) {
+		fnameNetwork = fnameCommunity = fnameStatistics = num;
+		fnameNetwork += ".nsa";  // Network, represented by tab separated arcs
+		if(cnodes)
+			fnameCommunity += ".cnl";  // Communities nodes lists / Nodes membership in communities
+		else fnameCommunity += ".nmc";  // Communities nodes lists / Nodes membership in communities
+		fnameStatistics += ".nst";  // Network statistics
+	}
 	else {
 				
 		cerr<<"\n***********************\nERROR while reading parameters: "<<flag<<" is an unknown option"<<endl;
@@ -396,6 +425,15 @@
 	cout<<"-on\t\t[number of overlapping nodes]"<<endl;
 	cout<<"-om\t\t[number of memberships of the overlapping nodes]"<<endl;
 	cout<<"-C\t\t[Average clustering coefficient]"<<endl;
+	cout<<"-cnl\t\t[output communities as strings of nodes (input format for NMI evaluation)]"<<endl;
+	cout<<"-name\t\t[base name for the output files]. It is used for the network, communities"
+		" and statistics; files extensions are added automatically:\n"
+		"\t.nsa  - network, represented by space/tab separated arcs\n"
+		"\t{.cnl, .nmc}  - communities, represented by nodes lists '.cnl' if '-cnl' is used"
+			", otherwise as a nodes membership in communities '.nmc')\n"
+		"\t.nst  - network statistics\n"
+		<<endl;
+
 
 	cout<<"----------------------\n"<<endl;
 	cout<<"It is also possible to set the parameters writing flags and relative numbers in a file. To specify the file, use the option:"<<endl;
@@ -420,7 +458,7 @@
 
 	cout<<"\n-------------------- Examples ---------------------------\n"<<endl;
 	cout<<"Example1:"<<endl;
-	cout<<"./benchmark -N 1000 -k 15 -maxk 50 -muw 0.1 -minc 20 -maxc 50"<<endl;
+	cout<<"./benchmark -N 1000 -k 15 -maxk 50 -muw 0.1 -minc 20 -maxc 50 -cnl 1 -name gen/case1K15"<<endl;
 	cout<<"Example2:"<<endl;
 	cout<<"./benchmark -f flags.dat -t1 3"<<endl;
 	
Only in weighted_networks/: statistics.dat
Only in weighted_networks/: time_seed.dat
